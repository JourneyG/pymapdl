from ansys.mapdl.core import launch_mapdl

try:
    mapdl.clear()
except:
    mapdl = launch_mapdl()


# enter the preprocessor and set the material properties
# Units mm, MPa
mapdl.prep7()
mapdl.mp('EX', 1, 200000)
mapdl.mp('NUXY', 1, 0.3)
mapdl.mp('DENS', 1, 7.85e-09)

# generate a block volume starting at (0, 0) with the dimensions
# (1000 x 100 x 10) mm
mapdl.blc4(0, 0, 1000, 100, 10)

# visualize this
mapdl.aplot()

###############################################################################
# Mesh the canteliever beam
# specify unit types
mapdl.et(1, 186)  # solid element

surf_etype = 2
mapdl.et(surf_etype, 154)  # surface element

# mesh the entire beam with a mesh size of 5 mm and visualize this
mapdl.esize(10)
mapdl.vmesh('all')
mapdl.eplot(show_bounds=True, cpos='xy')


###############################################################################
# Apply a boundary condition at the "wall" of the cantilever beam

# select all nodes at the wall
mapdl.nsel('s', 'loc', 'x')

# apply a boundary condition for all selected nodes in all degrees of freedom
mapdl.d('all', 'all')

###############################################################################
# Generate a surface pressure at the tip of the beam.


# Select the nodes at the top of the beam and generate elements on
# surface defined by the selected nodes.
# mapdl.nsel('s', 'loc', 'y', 99, 100)
mapdl.nsel('s', 'loc', 'x', 999, 1000)
mapdl.type(surf_etype)  # defined earlier as SURF154
mapdl.esurf()

# Select just the surface elements generated by the esurf command
mapdl.esel('s', 'type', vmin=surf_etype)

# select the nodes touching the surface of the blade
mapdl.nsle()

# generate a pressure surface load on those elements
# Note that lkey=3 corresponds to a surface load in the tangential +y
# direction relative to the local element coordinate system.
#
# See the element manual for more details.
mapdl.sfe('all', lkey=3, lab='pres', kval=0, val1=-1)

# select all nodes and solve the static problem
mapdl.allsel()
output = mapdl.solution.run_static_analysis(lg_deflect=True)
output


###############################################################################
# Post-Processing

# enter the post-processor and load the last (and only) result
mapdl.post1()
mapdl.set('last')

# extract an array of nodal displacements
disp = mapdl.post_processing.nodal_displacement('ALL')
disp


###############################################################################
# Plot nodal displacement against the undeformed beam

disp = mapdl.post_processing.plot_nodal_displacement('Z', show_displacement=True,
                                                     show_edges=True,
                                                     show_scalar_bar=False)


###############################################################################
# Plot nodal von-mises stress and show the undeformed beam
disp = mapdl.post_processing.plot_nodal_eqv_stress(show_displacement=True,
                                                   show_edges=True,
                                                   show_scalar_bar=False)
